AWSTemplateFormatVersion: 2010-09-09
Description: Ollama with Open WebUI (uksb-qkr5e6fxra) (tag:noGPU)
Transform: "AWS::LanguageExtensions"

Metadata:
  License:
    Description: |
      Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
      SPDX-License-Identifier: MIT-0

      Permission is hereby granted, free of charge, to any person obtaining a copy of this
      software and associated documentation files (the "Software"), to deal in the Software
      without restriction, including without limitation the rights to use, copy, modify,
      merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
      permit persons to whom the Software is furnished to do so.

      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
      INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
      PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
      HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
      OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
      SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Ollama Web UI
        Parameters:
          - installWebUI
          - bedrockRegion
          - r53ZoneID
      - Label:
          default: EC2 Instance
        Parameters:
          - ec2Name
          - ec2KeyPair
          - osVersion
          - instanceType
          - ec2TerminationProtection
      - Label:
          default: EC2 Network
        Parameters:
          - vpcID
          - subnetID
          - displayPublicIP
          - assignStaticIP
      - Label:
          default: EC2 Remote administration
        Parameters:
          - ingressIPv4
          - ingressIPv6
          - allowSSHport
          - installDCV
      - Label:
          default: EBS volume
        Parameters:
          - volumeSize
          - volumeType
      - Label:
          default: Application Load Balancer (ALB)
        Parameters:
          - enableALB
          - albSubnets
          - albScheme
          - albIpAddressType
          - albLogging
      - Label:
          default: ALB HTTPS listener
        Parameters:
          - albCertificateArn
          - albSecurityPolicy
          - albRedirectHTTPtoHTTPS
          - albHstsHeaderValue
      - Label:
          default: Amazon CloudFront
        Parameters:
          - enableCloudFront
          - originType
          - cloudFrontLogging
      - Label:
          default: AWS Backup
        Parameters:
          - enableBackup
          - scheduleExpression
          - scheduleExpressionTimezone
          - deleteAfterDays

    ParameterLabels:
      installWebUI:
        default: "Install Web UI"
      bedrockRegion:
        default: "AWS Bedrock Region"
      r53ZoneID:
        default: "Route 53 hosted zone ID to grant access to"

      ec2Name:
        default: "EC2 instance name"
      ec2KeyPair:
        default: "Key pair"
      osVersion:
        default: "OS version and architecture"
      instanceType:
        default: "Instance type (x86_64 or arm64). Verify availability at https://console.aws.amazon.com/ec2/#InstanceTypes"
      ec2TerminationProtection:
        default: "Enable EC2 termination protection to prevent accidental deletion"

      volumeSize:
        default: "Volume size (GiB)"
      volumeType:
        default: "Volume type"

      vpcID:
        default: "VPC with outbound internet connectivity"
      subnetID:
        default: "Subnet with outbound internet connectivity"
      displayPublicIP:
        default: "EC2 in public subnet with public IP assigned?"
      assignStaticIP:
        default: "Elastic IP: assign static public internet IPv4 address"

      enableALB:
        default: "Deploy Application Load Balancer (ALB)"
      albSubnets:
        default: "Subnets for ALB. Select at least 2 in EC2 VPC. **Select a subnet even if not using ALB**"
      albScheme:
        default: "Load balancer scheme (internal or internet facing)"
      albIpAddressType:
        default: "IPv4 only, IPv6 only or dual stack (IPv4-and-IPv6)"
      albLogging:
        default: "Enable ALB logging"

      albCertificateArn:
        default: "Certificate ARN"
      albSecurityPolicy:
        default: "HTTPS listener security policy"
      albRedirectHTTPtoHTTPS:
        default: "Redirect HTTP requests to HTTPS"
      albHstsHeaderValue:
        default: "HSTS (HTTP Strict Transport Security) header value. Leave blank not to send"

      ingressIPv4:
        default: "Allowed source prefix (IPv4) to SSH/DCV"
      ingressIPv6:
        default: "Allowed source prefix (IPv6) to SSH/DCV"
      allowSSHport:
        default: "Allow SSH from network"
      installDCV:
        default: "Install graphical desktop environment and DCV server"

      enableBackup:
        default: "Backup EC2 instance"
      scheduleExpression:
        default: "CRON expression specifying when AWS Backup initiates a backup job"
      scheduleExpressionTimezone:
        default: "Timezone to set backup schedule"
      deleteAfterDays:
        default: "Number of days after creation that a recovery point (backup) is deleted"

      enableCloudFront:
        default: "Create Amazon CloudFront distribution"
      originType:
        default: "CloudFront origin type"
      cloudFrontLogging:
        default: "Enable CloudFront logging"

Parameters:
  installWebUI:
    Type: String
    Description: https://docs.openwebui.com/getting-started/quick-start/starting-with-ollama/
    AllowedValues:
      - "Yes"
      - "No"
    Default: "Yes"
  r53ZoneID:
    Type: String
    Description: https://console.aws.amazon.com/route53/hostedzones https://certbot-dns-route53.readthedocs.io/
    Default: "*"

  bedrockRegion:
    Type: String
    Description: https://docs.aws.amazon.com/bedrock/latest/userguide/models-regions.html
    AllowedValues:
      - us-east-1 (US East - N. Virginia)
      - us-east-2 (US East - Ohio)
      - us-west-2 (US West - Oregon)

      - ap-northeast-1 (Asia Pacific - Tokyo)
      - ap-northeast-2 (Asia Pacific - Seoul)
      - ap-northeast-3 (Asia Pacific - Osaka)

      - ap-south-1 (Asia Pacific - Mumbai)
      - ap-south-2 (Asia Pacific - Hyderabad)

      - ap-southeast-1 (Asia Pacific - Singapore)
      - ap-southeast-2 (Asia Pacific - Sydney)

      - ca-central-1 (Canada - Central)

      - eu-central-1 (Europe - Frankfurt)
      - eu-central-2 (Europe - Zurich)

      - eu-north-1 (Europe - Stockholm)
      - eu-west-1 (Europe - Ireland)
      - eu-west-2 (Europe - London)
      - eu-west-3 (Europe - Paris)

      - sa-east-1 (South America - SÃ£o Paulo)

      - us-gov-east-1 (AWS GovCloud - US-East)
      - us-gov-west-1 (AWS GovCloud - US-West)
    Default: us-west-2 (US West - Oregon)

  osVersion:
    Type: String
    Description: Ubuntu ( https://ubuntu.com/aws )
    AllowedValues:
      - Ubuntu 24.04 (x86_64)
      - Ubuntu 22.04 (x86_64)
      - Ubuntu Pro 24.04 (x86_64)
      - Ubuntu Pro 22.04 (x86_64)
      - Ubuntu 24.04 (arm64)
      - Ubuntu 22.04 (arm64)
      - Ubuntu Pro 24.04 (arm64)
      - Ubuntu Pro 22.04 (arm64)
    Default: Ubuntu 24.04 (x86_64)

  ec2Name:
    Type: String
    Description: EC2 instance name
    Default: Ollama

  ec2KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: https://console.aws.amazon.com/ec2/#KeyPairs
    AllowedPattern: .+
    ConstraintDescription: Select a key pair
  instanceType:
    Type: String
    Description: https://aws.amazon.com/ec2/instance-types/
    Default: t3.xlarge
  ec2TerminationProtection:
    Type: String
    Description: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_ChangingDisableAPITermination.html
    Default: "Yes"
    AllowedValues:
      - "Yes"
      - "No"

  vpcID:
    Type: AWS::EC2::VPC::Id
    Description: "https://console.aws.amazon.com/vpcconsole/home#vpcs:"
    AllowedPattern: .+
    ConstraintDescription: Select a VPC
  subnetID:
    Type: AWS::EC2::Subnet::Id
    Description: "https://console.aws.amazon.com/vpcconsole/home#subnets:"
    AllowedPattern: .+
    ConstraintDescription: Select a Subnet
  displayPublicIP:
    Type: String
    Description: Select No if EC2 has no public IP
    AllowedValues:
      - "Yes"
      - "No"
    Default: "Yes"
  assignStaticIP:
    Type: String
    Description: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html
    AllowedValues:
      - "Yes"
      - "No"
    Default: "Yes"

  enableALB:
    Type: String
    Description: https://docs.aws.amazon.com/elasticloadbalancing/latest/application/index.html
    AllowedValues:
      - "Yes"
      - "No"
    Default: "No"
  albScheme:
    Type: String
    Description: https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-application-load-balancer.html#configure-load-balancer
    AllowedValues:
      - internet-facing
      - internal
    Default: internet-facing
  albIpAddressType:
    Type: String
    AllowedValues:
      - IPv4
      - IPv4-and-IPv6
      - IPv6
    Default: IPv4
  albSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: "https://console.aws.amazon.com/vpcconsole/home#subnets:"
    ConstraintDescription: Select a subnet
    AllowedPattern: ".+"
  albLogging:
    Type: String
    Description: Enable logging to new S3 bucket
    AllowedValues:
      - "Yes"
      - "No"
    Default: "No"

  albCertificateArn:
    Type: String
    Description: "https://console.aws.amazon.com/acm/home?#/certificates/list ( aws acm list-certificates )"
    Default: ""
  albSecurityPolicy:
    Type: String
    Description: "https://docs.aws.amazon.com/elasticloadbalancing/latest/application/describe-ssl-policies.html"
    AllowedValues:
      - ELBSecurityPolicy-TLS13-1-3-FIPS-2023-04
      - ELBSecurityPolicy-TLS13-1-3-2021-06
      - ELBSecurityPolicy-TLS13-1-2-Res-FIPS-2023-04
      - ELBSecurityPolicy-TLS13-1-2-Res-2021-06
      - ELBSecurityPolicy-TLS13-1-2-FIPS-2023-04
      - ELBSecurityPolicy-TLS13-1-2-Ext2-FIPS-2023-04
      - ELBSecurityPolicy-TLS13-1-2-Ext2-2021-06
      - ELBSecurityPolicy-TLS13-1-2-Ext1-FIPS-2023-04
      - ELBSecurityPolicy-TLS13-1-2-Ext1-2021-06
      - ELBSecurityPolicy-TLS13-1-2-Ext0-FIPS-2023-04
      - ELBSecurityPolicy-TLS13-1-2-2021-06
      - ELBSecurityPolicy-TLS13-1-1-FIPS-2023-04
      - ELBSecurityPolicy-TLS13-1-1-2021-06
      - ELBSecurityPolicy-TLS13-1-0-FIPS-2023-04
      - ELBSecurityPolicy-TLS13-1-0-2021-06
      - ELBSecurityPolicy-TLS-1-2-Ext-2018-06
      - ELBSecurityPolicy-TLS-1-2-2017-01
      - ELBSecurityPolicy-TLS-1-1-2017-01
      - ELBSecurityPolicy-TLS-1-0-2015-04
      - ELBSecurityPolicy-FS-2018-06
      - ELBSecurityPolicy-FS-1-2-Res-2020-10
      - ELBSecurityPolicy-FS-1-2-Res-2019-08
      - ELBSecurityPolicy-FS-1-2-2019-08
      - ELBSecurityPolicy-FS-1-1-2019-08
      - ELBSecurityPolicy-2016-08
    Default: ELBSecurityPolicy-TLS13-1-2-2021-06
  albRedirectHTTPtoHTTPS:
    Type: String
    AllowedValues:
      - "Yes"
      - "No"
    Default: "Yes"
  albHstsHeaderValue:
    Type: String
    Description: "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html"
    Default: "max-age=31536000; includeSubDomains"

  ingressIPv4:
    Type: String
    Description: e.g. 1.2.3.4/32, get your internet IPv4 address from https://checkip.amazonaws.com
    AllowedPattern: "^\\d+\\.\\d+\\.\\d+\\.\\d+\\/\\d+$"
    ConstraintDescription: Specify valid IPv4 prefix
    Default: 0.0.0.0/0
  ingressIPv6:
    Type: String
    Description: e.g. 1:2:3:4::/64, get your internet IPv6 address (if any) with tools such as https://ifconfig.co
    AllowedPattern: .+
    ConstraintDescription: Specify valid IPv6 prefix
    Default: ::/0
  allowSSHport:
    Type: String
    Description: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/connect-linux-inst-ssh.html
    AllowedValues:
      - "Yes"
      - "No"
    Default: "Yes"
  installDCV:
    Type: String
    Description: https://aws.amazon.com/hpc/dcv/
    AllowedValues:
      - "Yes"
      - "No"
    Default: "No"

  volumeSize:
    Type: Number
    Description: https://docs.aws.amazon.com/ebs/latest/userguide/volume_constraints.html
    MinValue: 50
    MaxValue: 16384
    Default: 100
  volumeType:
    Type: String
    Description: https://docs.aws.amazon.com/ebs/latest/userguide/ebs-volume-types.html
    AllowedValues:
      - gp3
      - gp2
    Default: gp3

  enableBackup:
    Type: String
    Description: https://docs.aws.amazon.com/aws-backup/
    AllowedValues:
      - "Yes"
      - "No"
    Default: "No"
  scheduleExpression:
    Type: String
    Description: https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-scheduled-rule-pattern.html
    AllowedPattern: .+
    Default: "cron(0 1 ? * * *)"
  scheduleExpressionTimezone: # https://nodatime.org/TimeZones?version=2024a&format=json
    Type: String
    Description: https://docs.aws.amazon.com/scheduler/latest/UserGuide/schedule-types.html#time-zones
    AllowedValues:
      - Africa/Abidjan
      - Africa/Algiers
      - Africa/Bissau
      - Africa/Cairo
      - Africa/Casablanca
      - Africa/Ceuta
      - Africa/El_Aaiun
      - Africa/Johannesburg
      - Africa/Juba
      - Africa/Khartoum
      - Africa/Lagos
      - Africa/Maputo
      - Africa/Monrovia
      - Africa/Nairobi
      - Africa/Ndjamena
      - Africa/Sao_Tome
      - Africa/Tripoli
      - Africa/Tunis
      - Africa/Windhoek
      - America/Adak
      - America/Anchorage
      - America/Araguaina
      - America/Argentina/Buenos_Aires
      - America/Argentina/Catamarca
      - America/Argentina/Cordoba
      - America/Argentina/Jujuy
      - America/Argentina/La_Rioja
      - America/Argentina/Mendoza
      - America/Argentina/Rio_Gallegos
      - America/Argentina/Salta
      - America/Argentina/San_Juan
      - America/Argentina/San_Luis
      - America/Argentina/Tucuman
      - America/Argentina/Ushuaia
      - America/Asuncion
      - America/Bahia
      - America/Bahia_Banderas
      - America/Barbados
      - America/Belem
      - America/Belize
      - America/Boa_Vista
      - America/Bogota
      - America/Boise
      - America/Cambridge_Bay
      - America/Campo_Grande
      - America/Cancun
      - America/Caracas
      - America/Cayenne
      - America/Chicago
      - America/Chihuahua
      - America/Ciudad_Juarez
      - America/Costa_Rica
      - America/Cuiaba
      - America/Danmarkshavn
      - America/Dawson
      - America/Dawson_Creek
      - America/Denver
      - America/Detroit
      - America/Edmonton
      - America/Eirunepe
      - America/El_Salvador
      - America/Fort_Nelson
      - America/Fortaleza
      - America/Glace_Bay
      - America/Goose_Bay
      - America/Grand_Turk
      - America/Guatemala
      - America/Guayaquil
      - America/Guyana
      - America/Halifax
      - America/Havana
      - America/Hermosillo
      - America/Indiana/Indianapolis
      - America/Indiana/Knox
      - America/Indiana/Marengo
      - America/Indiana/Petersburg
      - America/Indiana/Tell_City
      - America/Indiana/Vevay
      - America/Indiana/Vincennes
      - America/Indiana/Winamac
      - America/Inuvik
      - America/Iqaluit
      - America/Jamaica
      - America/Juneau
      - America/Kentucky/Louisville
      - America/Kentucky/Monticello
      - America/La_Paz
      - America/Lima
      - America/Los_Angeles
      - America/Maceio
      - America/Managua
      - America/Manaus
      - America/Martinique
      - America/Matamoros
      - America/Mazatlan
      - America/Menominee
      - America/Merida
      - America/Metlakatla
      - America/Mexico_City
      - America/Miquelon
      - America/Moncton
      - America/Monterrey
      - America/Montevideo
      - America/New_York
      - America/Nome
      - America/Noronha
      - America/North_Dakota/Beulah
      - America/North_Dakota/Center
      - America/North_Dakota/New_Salem
      - America/Nuuk
      - America/Ojinaga
      - America/Panama
      - America/Paramaribo
      - America/Phoenix
      - America/Port-au-Prince
      - America/Porto_Velho
      - America/Puerto_Rico
      - America/Punta_Arenas
      - America/Rankin_Inlet
      - America/Recife
      - America/Regina
      - America/Resolute
      - America/Rio_Branco
      - America/Santarem
      - America/Santiago
      - America/Santo_Domingo
      - America/Sao_Paulo
      - America/Scoresbysund
      - America/Sitka
      - America/St_Johns
      - America/Swift_Current
      - America/Tegucigalpa
      - America/Thule
      - America/Tijuana
      - America/Toronto
      - America/Vancouver
      - America/Whitehorse
      - America/Winnipeg
      - America/Yakutat
      - Antarctica/Casey
      - Antarctica/Davis
      - Antarctica/Macquarie
      - Antarctica/Mawson
      - Antarctica/Palmer
      - Antarctica/Rothera
      - Antarctica/Troll
      - Antarctica/Vostok
      - Asia/Almaty
      - Asia/Amman
      - Asia/Anadyr
      - Asia/Aqtau
      - Asia/Aqtobe
      - Asia/Ashgabat
      - Asia/Atyrau
      - Asia/Baghdad
      - Asia/Baku
      - Asia/Bangkok
      - Asia/Barnaul
      - Asia/Beirut
      - Asia/Bishkek
      - Asia/Chita
      - Asia/Choibalsan
      - Asia/Colombo
      - Asia/Damascus
      - Asia/Dhaka
      - Asia/Dili
      - Asia/Dubai
      - Asia/Dushanbe
      - Asia/Famagusta
      - Asia/Gaza
      - Asia/Hebron
      - Asia/Ho_Chi_Minh
      - Asia/Hong_Kong
      - Asia/Hovd
      - Asia/Irkutsk
      - Asia/Jakarta
      - Asia/Jayapura
      - Asia/Jerusalem
      - Asia/Kabul
      - Asia/Kamchatka
      - Asia/Karachi
      - Asia/Kathmandu
      - Asia/Khandyga
      - Asia/Kolkata
      - Asia/Krasnoyarsk
      - Asia/Kuching
      - Asia/Macau
      - Asia/Magadan
      - Asia/Makassar
      - Asia/Manila
      - Asia/Nicosia
      - Asia/Novokuznetsk
      - Asia/Novosibirsk
      - Asia/Omsk
      - Asia/Oral
      - Asia/Pontianak
      - Asia/Pyongyang
      - Asia/Qatar
      - Asia/Qostanay
      - Asia/Qyzylorda
      - Asia/Riyadh
      - Asia/Sakhalin
      - Asia/Samarkand
      - Asia/Seoul
      - Asia/Shanghai
      - Asia/Singapore
      - Asia/Srednekolymsk
      - Asia/Taipei
      - Asia/Tashkent
      - Asia/Tbilisi
      - Asia/Tehran
      - Asia/Thimphu
      - Asia/Tokyo
      - Asia/Tomsk
      - Asia/Ulaanbaatar
      - Asia/Urumqi
      - Asia/Ust-Nera
      - Asia/Vladivostok
      - Asia/Yakutsk
      - Asia/Yangon
      - Asia/Yekaterinburg
      - Asia/Yerevan
      - Atlantic/Azores
      - Atlantic/Bermuda
      - Atlantic/Canary
      - Atlantic/Cape_Verde
      - Atlantic/Faroe
      - Atlantic/Madeira
      - Atlantic/South_Georgia
      - Atlantic/Stanley
      - Australia/Adelaide
      - Australia/Brisbane
      - Australia/Broken_Hill
      - Australia/Darwin
      - Australia/Eucla
      - Australia/Hobart
      - Australia/Lindeman
      - Australia/Lord_Howe
      - Australia/Melbourne
      - Australia/Perth
      - Australia/Sydney
      - CET
      - CST6CDT
      - EET
      - EST
      - EST5EDT
      - Etc/GMT
      - Etc/GMT+1
      - Etc/GMT+10
      - Etc/GMT+11
      - Etc/GMT+12
      - Etc/GMT+2
      - Etc/GMT+3
      - Etc/GMT+4
      - Etc/GMT+5
      - Etc/GMT+6
      - Etc/GMT+7
      - Etc/GMT+8
      - Etc/GMT+9
      - Etc/GMT-1
      - Etc/GMT-10
      - Etc/GMT-11
      - Etc/GMT-12
      - Etc/GMT-13
      - Etc/GMT-14
      - Etc/GMT-2
      - Etc/GMT-3
      - Etc/GMT-4
      - Etc/GMT-5
      - Etc/GMT-6
      - Etc/GMT-7
      - Etc/GMT-8
      - Etc/GMT-9
      - Etc/UTC
      - Europe/Andorra
      - Europe/Astrakhan
      - Europe/Athens
      - Europe/Belgrade
      - Europe/Berlin
      - Europe/Brussels
      - Europe/Bucharest
      - Europe/Budapest
      - Europe/Chisinau
      - Europe/Dublin
      - Europe/Gibraltar
      - Europe/Helsinki
      - Europe/Istanbul
      - Europe/Kaliningrad
      - Europe/Kirov
      - Europe/Kyiv
      - Europe/Lisbon
      - Europe/London
      - Europe/Madrid
      - Europe/Malta
      - Europe/Minsk
      - Europe/Moscow
      - Europe/Paris
      - Europe/Prague
      - Europe/Riga
      - Europe/Rome
      - Europe/Samara
      - Europe/Saratov
      - Europe/Simferopol
      - Europe/Sofia
      - Europe/Tallinn
      - Europe/Tirane
      - Europe/Ulyanovsk
      - Europe/Vienna
      - Europe/Vilnius
      - Europe/Volgograd
      - Europe/Warsaw
      - Europe/Zurich
      - HST
      - Indian/Chagos
      - Indian/Maldives
      - Indian/Mauritius
      - MET
      - MST
      - MST7MDT
      - PST8PDT
      - Pacific/Apia
      - Pacific/Auckland
      - Pacific/Bougainville
      - Pacific/Chatham
      - Pacific/Easter
      - Pacific/Efate
      - Pacific/Fakaofo
      - Pacific/Fiji
      - Pacific/Galapagos
      - Pacific/Gambier
      - Pacific/Guadalcanal
      - Pacific/Guam
      - Pacific/Honolulu
      - Pacific/Kanton
      - Pacific/Kiritimati
      - Pacific/Kosrae
      - Pacific/Kwajalein
      - Pacific/Marquesas
      - Pacific/Nauru
      - Pacific/Niue
      - Pacific/Norfolk
      - Pacific/Noumea
      - Pacific/Pago_Pago
      - Pacific/Palau
      - Pacific/Pitcairn
      - Pacific/Port_Moresby
      - Pacific/Rarotonga
      - Pacific/Tahiti
      - Pacific/Tarawa
      - Pacific/Tongatapu
      - WET
    Default: Etc/UTC
  deleteAfterDays:
    Type: Number
    # Description: Number of days after creation that a recovery point (backup) is deleted
    Default: 35

  enableCloudFront:
    Type: String
    Description: https://docs.aws.amazon.com/cloudfront/
    AllowedValues:
      - "Yes"
      - "No"
    Default: "No"
  originType:
    Type: String
    Description: https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-vpc-origins.html
    AllowedValues:
      - "Custom Origin"
      - "VPC Origin"
    Default: "Custom Origin"
  cloudFrontLogging:
    Type: String
    Description: Logging to new S3 bucket ( https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/AccessLogs.html )
    AllowedValues:
      - "Yes"
      - "No"
    Default: "No"

Conditions:
  useUbuntu2404x86: !Equals [!Ref osVersion, "Ubuntu 24.04 (x86_64)"]
  useUbuntu2404arm64: !Equals [!Ref osVersion, "Ubuntu 24.04 (arm64)"]
  useUbuntu2204x86: !Equals [!Ref osVersion, "Ubuntu 22.04 (x86_64)"]
  useUbuntu2204arm64: !Equals [!Ref osVersion, "Ubuntu 22.04 (arm64)"]

  useUbuntuPro2404x86: !Equals [!Ref osVersion, "Ubuntu Pro 24.04 (x86_64)"]
  useUbuntuPro2404arm64: !Equals [!Ref osVersion, "Ubuntu Pro 24.04 (arm64)"]
  useUbuntuPro2204x86: !Equals [!Ref osVersion, "Ubuntu Pro 22.04 (x86_64)"]

  displayPublicIP: !Equals [!Ref displayPublicIP, "Yes"]
  useElasticIP:
    !And [!Condition displayPublicIP, !Equals [!Ref assignStaticIP, "Yes"]]
  enableProtection: !Equals [!Ref ec2TerminationProtection, "Yes"]

  hasEIC:
    !Not [
      !Equals [
        !FindInMap [
          EICprefixMap,
          !Ref AWS::Region,
          IpPrefix,
          DefaultValue: 127.0.0.1/32,
        ],
        127.0.0.1/32,
      ],
    ]
  createSgEIC: !And [!Condition hasEIC, !Condition displayPublicIP]

  hasCFprefix:
    !Not [
      !Equals [
        !FindInMap [
          CFprefixMap,
          !Ref AWS::Region,
          PrefixList,
          DefaultValue: pl-none,
        ],
        pl-none,
      ],
    ]
  createSgCloudFront:
    !And [
      !Or [!Condition createSgWeb, !Condition createCloudFront],
      !Condition hasCFprefix,
    ]
  createCloudFront: !Equals [!Ref enableCloudFront, "Yes"]
  cfVPCOrigin:
    !And [!Condition createCloudFront, !Equals [!Ref originType, "VPC Origin"]]
  enableCloudFrontLogging:
    !And [!Condition createCloudFront, !Equals [!Ref cloudFrontLogging, "Yes"]]
  noCloudFrontLogging:
    !And [!Condition createCloudFront, !Equals [!Ref cloudFrontLogging, "No"]]

  createSgSSH: !Equals [!Ref allowSSHport, "Yes"]
  createBackup: !Equals [!Ref enableBackup, "Yes"]

  hasR53Zone: !Not [!Equals [!Ref r53ZoneID, ""]]

  installDCV: !Equals [!Ref installDCV, "Yes"]

  createALB: !Equals [!Ref enableALB, "Yes"]
  enableAlbLogging:
    !And [!Condition createALB, !Equals [!Ref albLogging, "Yes"]]
  isPre2022Region:
    !Not [
      !Equals [
        !FindInMap [
          albLoggingAccountID,
          !Ref AWS::Region,
          Value,
          DefaultValue: "",
        ],
        "",
      ],
    ]
  albAllowIPv4:
    !Or [
      !Equals [!Ref albIpAddressType, "IPv4"],
      !Equals [!Ref albIpAddressType, "IPv4-and-IPv6"],
    ]
  albAllowIPv6:
    !Or [
      !Equals [!Ref albIpAddressType, "IPv6"],
      !Equals [!Ref albIpAddressType, "IPv4-and-IPv6"],
    ]

  createHttpsListener:
    !And [!Condition createALB, !Not [!Equals [!Ref albCertificateArn, ""]]]
  createHttpRedirectListener:
    !And [
      !Condition createHttpsListener,
      !Equals [!Ref albRedirectHTTPtoHTTPS, "Yes"],
    ]
  createHttpListener:
    !And [!Condition createALB, !Not [!Condition createHttpRedirectListener]]
  sendHSTS: !Not [!Equals [!Ref albHstsHeaderValue, ""]]

  installWebUI: !Equals [!Ref installWebUI, "Yes"]
  createSgWeb:
    !Or [
      !Condition installWebUI,
      !Or [!Condition createALB, !Condition createCloudFront],
    ]

Mappings:
  EICprefixMap: # EC2 instance connect: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-connect-prerequisites.html#ec2-instance-connect-setup-security-group
    af-south-1:
      IpPrefix: 13.244.121.196/30
      Ipv6Prefix: 2406:da11:700:3b00::/56
    ap-east-1:
      IpPrefix: 43.198.192.104/29
      Ipv6Prefix: 2406:da1e:da1:3c00::/56
    ap-northeast-1:
      IpPrefix: 3.112.23.0/29
      Ipv6Prefix: 2406:da14:1c18:2100::/56
    ap-northeast-2:
      IpPrefix: 13.209.1.56/29
      Ipv6Prefix: 2406:da12:1e1:d900::/56
    ap-northeast-3:
      IpPrefix: 15.168.105.160/29
      Ipv6Prefix: 2406:da16:856:a500::/56
    ap-south-1:
      IpPrefix: 13.233.177.0/29
      Ipv6Prefix: 2406:da1a:74a:4b00::/56
    ap-south-2:
      IpPrefix: 18.60.252.248/29
      Ipv6Prefix: 2406:da1b:d1d:8800::/56
    ap-southeast-1:
      IpPrefix: 3.0.5.32/29
      Ipv6Prefix: 2406:da18:752:6600::/56
    ap-southeast-2:
      IpPrefix: 13.239.158.0/29
      Ipv6Prefix: 2406:da1c:90e:4a00::/56
    ap-southeast-3:
      IpPrefix: 43.218.193.64/29
      Ipv6Prefix: 2406:da19:14b:8c00::/56
    ap-southeast-4:
      IpPrefix: 16.50.248.80/29
      Ipv6Prefix: 2406:da1f:b4f:4600::/56
    ap-southeast-5:
      IpPrefix: 43.216.87.48/29
      Ipv6Prefix: 2406:da10:84f9:9e00::/56
    ca-central-1:
      IpPrefix: 35.183.92.176/29
      Ipv6Prefix: 2600:1f11:ae3:700::/56
    ca-west-1:
      IpPrefix: 40.176.213.168/29
      Ipv6Prefix: 2600:1f1a:4ff6:d500::/56
    cn-north-1:
      IpPrefix: 43.196.20.40/29
      Ipv6Prefix: 2400:7fc0:86fd:e00::/56
    cn-northwest-1:
      IpPrefix: 43.192.155.8/29
      Ipv6Prefix: 2404:c2c0:87aa:4800::/56
    eu-central-1:
      IpPrefix: 3.120.181.40/29
      Ipv6Prefix: 2a05:d014:17a8:8b00::/56
    eu-central-2:
      IpPrefix: 16.63.77.8/29
      Ipv6Prefix: 2a05:d019:1d6:2100::/56
    eu-north-1:
      IpPrefix: 13.48.4.200/30
      Ipv6Prefix: 2a05:d016:494:f00::/56
    eu-south-1:
      IpPrefix: 15.161.135.164/30
      Ipv6Prefix: 2a05:d01a:c03:4a00::/56
    eu-south-2:
      IpPrefix: 18.101.90.48/29
      Ipv6Prefix: 2a05:d011:cbe:f700::/56
    eu-west-1:
      IpPrefix: 18.202.216.48/29
      Ipv6Prefix: 2a05:d018:403:4e00::/56
    eu-west-2:
      IpPrefix: 3.8.37.24/29
      Ipv6Prefix: 2a05:d01c:4ac:3100::/56
    eu-west-3:
      IpPrefix: 35.180.112.80/29
      Ipv6Prefix: 2a05:d012:c9e:d600::/56
    il-central-1:
      IpPrefix: 51.16.183.224/29
      Ipv6Prefix: 2a05:d025:451:7d00::/56
    me-central-1:
      IpPrefix: 3.29.147.40/29
      Ipv6Prefix: 2406:da17:1db:b00::/56
    me-south-1:
      IpPrefix: 16.24.46.56/29
      Ipv6Prefix: 2a05:d01e:27f:ac00::/56
    sa-east-1:
      IpPrefix: 18.228.70.32/29
      Ipv6Prefix: 2600:1f1e:d1d:e700::/56
    us-east-1:
      IpPrefix: 18.206.107.24/29
      Ipv6Prefix: 2600:1f18:6fe3:8c00::/56
    us-east-2:
      IpPrefix: 3.16.146.0/29
      Ipv6Prefix: 2600:1f16:138f:cf00::/56
    us-gov-east-1:
      IpPrefix: 18.252.4.0/30
      Ipv6Prefix: 2600:1f15:d63:bd00::/56
    us-gov-west-1:
      IpPrefix: 15.200.28.80/30
      Ipv6Prefix: 2600:1f12:fa9:5100::/56
    us-west-1:
      IpPrefix: 13.52.6.112/29
      Ipv6Prefix: 2600:1f1c:12d:e900::/56
    us-west-2:
      IpPrefix: 18.237.140.160/29
      Ipv6Prefix: 2600:1f13:a0d:a700::/56

  CFprefixMap: # aws ec2 describe-managed-prefix-lists --query "PrefixLists[?PrefixListName=='com.amazonaws.global.cloudfront.origin-facing']" --region <REGION>
    af-south-1:
      PrefixList: pl-c0aa4fa9
    ap-east-1:
      PrefixList: pl-14b2577d
    ap-northeast-1:
      PrefixList: pl-58a04531
    ap-northeast-2:
      PrefixList: pl-22a6434b
    ap-northeast-3:
      PrefixList: pl-31a14458
    ap-south-1:
      PrefixList: pl-9aa247f3
    ap-south-2:
      PrefixList: pl-0a25c3463226fcc61
    ap-southeast-1:
      PrefixList: pl-31a34658
    ap-southeast-2:
      PrefixList: pl-b8a742d1
    ap-southeast-3:
      PrefixList: pl-bca247d5
    ap-southeast-4:
      PrefixList: pl-0fb7e7cfe038ae0e9
    ap-southeast-5:
      PrefixList: pl-09076f83e90b139d0
    ap-southeast-7:
      PrefixList: pl-0857de2e2b1c7f2a2
    ca-central-1:
      PrefixList: pl-38a64351
    ca-west-1:
      PrefixList: pl-0530d4c590b35122b
    eu-central-1:
      PrefixList: pl-a3a144ca
    eu-central-2:
      PrefixList: pl-00b37293991dbe6a8
    eu-north-1:
      PrefixList: pl-fab65393
    eu-south-1:
      PrefixList: pl-1bbc5972
    eu-south-2:
      PrefixList: pl-052dcbe0f793f19da
    eu-west-1:
      PrefixList: pl-4fa04526
    eu-west-2:
      PrefixList: pl-93a247fa
    eu-west-3:
      PrefixList: pl-75b1541c
    il-central-1:
      PrefixList: pl-0dd89524416301988
    me-central-1:
      PrefixList: pl-05266a86378662c23
    me-south-1:
      PrefixList: pl-17b2577e
    sa-east-1:
      PrefixList: pl-5da64334
    us-east-1:
      PrefixList: pl-3b927c52
    us-east-2:
      PrefixList: pl-b6a144df
    us-west-1:
      PrefixList: pl-4ea04527
    us-west-2:
      PrefixList: pl-82a045eb

  albIpTypeMapping:
    IPv4:
      Value: ipv4
    IPv4-and-IPv6:
      Value: dualstack
    IPv6:
      Value: dualstack-without-public-ipv4

  albLoggingAccountID:
    # https://docs.aws.amazon.com/elasticloadbalancing/latest/application/enable-access-logging.html
    us-east-1:
      Value: 127311923021
    us-east-2:
      Value: 033677994240
    us-west-1:
      Value: 027434742180
    us-west-2:
      Value: 797873946194
    af-south-1:
      Value: 098369216593
    ap-east-1:
      Value: 754344448648
    ap-southeast-3:
      Value: 589379963580
    ap-south-1:
      Value: 718504428378
    ap-northeast-3:
      Value: 383597477331
    ap-northeast-2:
      Value: 600734575887
    ap-southeast-1:
      Value: 114774131450
    ap-southeast-2:
      Value: 783225319266
    ap-northeast-1:
      Value: 582318560864
    ca-central-1:
      Value: 985666609251
    eu-central-1:
      Value: 054676820928
    eu-west-1:
      Value: 156460612806
    eu-west-2:
      Value: 652711504416
    eu-south-1:
      Value: 635631232127
    eu-west-3:
      Value: 009996457667
    eu-north-1:
      Value: 897822967062
    me-south-1:
      Value: 076674570225
    sa-east-1:
      Value: 507241528517
    us-gov-west-1:
      Value: 048591011584
    us-gov-east-1:
      Value: 190560391635
    # https://docs.amazonaws.cn/en_us/elasticloadbalancing/latest/application/enable-access-logging.html
    cn-north-1:
      Value: 638102146993
    cn-northwest-1:
      Value: 037604701340

  ConsoleUrl:
    aws:
      url: console.aws.amazon.com
    aws-cn:
      url: console.amazonaws.cn
    aws-gov:
      url: console.amazonaws-us-gov.com

Resources:
  instanceIamRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "* resource access is required for proper functionality"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: [sts:AssumeRole]
      Path: /
      Policies:
        - !If
          - installDCV
          - PolicyName: dcvLicensing
            PolicyDocument: # https://docs.aws.amazon.com/dcv/latest/adminguide/setting-up-license.html
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - s3:GetObject
                  Resource: !Sub arn:*:s3:::dcv-license.${AWS::Region}/*
          - !Ref AWS::NoValue
        - !If
          - hasR53Zone
          - PolicyName: Route53CertbotAccess
            PolicyDocument: # Certbot dns_route53 : https://certbot-dns-route53.readthedocs.io/en/stable/
              Version: "2012-10-17"
              Statement: # https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/specifying-rrset-conditions.html
                - Effect: Allow
                  Action:
                    - route53:ListHostedZones
                    - route53:GetChange
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - route53:ChangeResourceRecordSets
                  Resource: !Sub arn:${AWS::Partition}:route53:::hostedzone/${r53ZoneID}
                  Condition:
                    IpAddress:
                      aws:SourceIp: 0.0.0.0/0
                    ForAllValues:StringEquals:
                      route53:ChangeResourceRecordSetsRecordTypes: [TXT]
                    ForAllValues:StringLike:
                      route53:ChangeResourceRecordSetsNormalizedRecordNames:
                        [_acme-challenge.*]
          - !Ref AWS::NoValue
        - PolicyName: ListBedrockModelsAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:ListFoundationModels
                  - bedrock:ListInferenceProfiles
                Resource: "*"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy"
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: GitHub
          Value: https://github.com/aws-samples/ollama-server

  instanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref instanceIamRole

  securityGroup:
    Type: AWS::EC2::SecurityGroup
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W5
            reason: "Egress is limited to HTTP, HTTPS and ping traffic"
          - id: W9
            reason: "Not /32 CIDR ingress is required for proper functionality"
          - id: W2
            reason: "Open to world ingress is need for HTTP/HTTPS. ALB option is available for more security"
          - id: W27
            reason: "Ingress TCP traffic from ALB"
          - id: W40
            reason: "OS need unrestricted access to the internet for updates and patches"
    #checkov:skip=CKV_AWS_23:All rules have description
    Properties:
      GroupDescription: Allow inbound HTTP/HTTPS/Ollama/ALB and remote admin (SSH/DCV)
      VpcId: !Ref vpcID
      SecurityGroupIngress:
        - !If
          - createSgSSH
          - Description: SSH (IPv4)
            IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Ref ingressIPv4
          - !Ref AWS::NoValue
        - !If
          - createSgSSH
          - Description: SSH (IPv6)
            IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIpv6: !Ref ingressIPv6
          - !Ref AWS::NoValue
        - !If
          - installDCV
          - Description: DCV (IPv4)
            IpProtocol: tcp
            FromPort: 8443
            ToPort: 8443
            CidrIp: !Ref ingressIPv4
          - !Ref AWS::NoValue
        - !If
          - installDCV
          - Description: DCV (IPv6)
            IpProtocol: tcp
            FromPort: 8443
            ToPort: 8443
            CidrIpv6: !Ref ingressIPv6
          - !Ref AWS::NoValue
        - !If
          - installDCV
          - Description: DCV QUIC (IPv4)
            IpProtocol: udp
            FromPort: 8443
            ToPort: 8443
            CidrIp: !Ref ingressIPv4
          - !Ref AWS::NoValue
        - !If
          - installDCV
          - Description: DCV QUIC (IPv6)
            IpProtocol: udp
            FromPort: 8443
            ToPort: 8443
            CidrIpv6: !Ref ingressIPv6
          - !Ref AWS::NoValue
        - !If
          - createSgEIC
          - Description: SSH (EC2 Instance Connect IPv4)
            IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !FindInMap [EICprefixMap, !Ref AWS::Region, IpPrefix]
          - !Ref AWS::NoValue
        - !If
          - createSgEIC
          - Description: SSH (EC2 Instance Connect IPv6)
            IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIpv6: !FindInMap [EICprefixMap, !Ref AWS::Region, Ipv6Prefix]
          - !Ref AWS::NoValue
        - !If
          - createSgWeb
          - Description: HTTP (IPv4)
            IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          - !Ref AWS::NoValue
        - !If
          - createSgWeb
          - Description: HTTP (IPv6)
            IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIpv6: ::/0
          - !Ref AWS::NoValue
        - !If
          - createSgWeb
          - Description: HTTPS (IPv4)
            IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: 0.0.0.0/0
          - !Ref AWS::NoValue
        - !If
          - createSgWeb
          - Description: HTTPS (IPv6)
            IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIpv6: ::/0
          - !Ref AWS::NoValue
        - !If
          - createALB
          - Description: ALB
            IpProtocol: tcp
            FromPort: 0
            ToPort: 65535
            SourceSecurityGroupId: !Ref albSecurityGroup
          - !Ref AWS::NoValue
      SecurityGroupEgress:
        - Description: Allow all outbound traffic (IPv4)
          IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
        - Description: Allow all outbound traffic (IPv6)
          IpProtocol: "-1"
          CidrIpv6: ::/0
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: Name
          Value: !Sub
            - "${AWS::StackName}-securityGroup-${UID}"
            - UID:
                !Select [
                  3,
                  !Split ["-", !Select [2, !Split ["/", !Ref AWS::StackId]]],
                ]
        - Key: GitHub
          Value: https://github.com/aws-samples/ollama-server

  securityGroupForCloudFrontHTTP:
    Type: AWS::EC2::SecurityGroup
    Condition: createSgCloudFront
    Properties:
      GroupDescription: Allow inbound HTTP from CloudFront
      VpcId: !Ref vpcID
      SecurityGroupIngress:
        - Description: HTTP (CloudFront origin IP)
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourcePrefixListId:
            !FindInMap [CFprefixMap, !Ref AWS::Region, PrefixList]
      SecurityGroupEgress:
        - Description: Ping (CloudFront origin IP)
          IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          DestinationPrefixListId:
            !FindInMap [CFprefixMap, !Ref AWS::Region, PrefixList]
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: Name
          Value: !Sub
            - "${AWS::StackName}-CloudFrontHTTP-${UID}"
            - UID:
                !Select [
                  3,
                  !Split ["-", !Select [2, !Split ["/", !Ref AWS::StackId]]],
                ]
        - Key: GitHub
          Value: https://github.com/aws-samples/ollama-server

  securityGroupForCloudFrontHTTPS:
    Type: AWS::EC2::SecurityGroup
    Condition: createSgCloudFront
    Properties:
      GroupDescription: Allow inbound HTTPS from CloudFront
      VpcId: !Ref vpcID
      SecurityGroupIngress:
        - Description: HTTPS (CloudFront origin IP)
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourcePrefixListId:
            !FindInMap [CFprefixMap, !Ref AWS::Region, PrefixList]
      SecurityGroupEgress:
        - Description: Ping (CloudFront origin IP)
          IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          DestinationPrefixListId:
            !FindInMap [CFprefixMap, !Ref AWS::Region, PrefixList]
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: Name
          Value: !Sub
            - "${AWS::StackName}-CloudFrontHTTPS-${UID}"
            - UID:
                !Select [
                  3,
                  !Split ["-", !Select [2, !Split ["/", !Ref AWS::StackId]]],
                ]
        - Key: GitHub
          Value: https://github.com/aws-samples/ollama-server

  iamBedrockUser:
    Type: AWS::IAM::User
    Properties:
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: GitHub
          Value: https://github.com/aws-samples/nextcloud-server

  iamBedrockGroup:
    Type: AWS::IAM::Group
    Properties:

  iamBedrockGroupPolicy:
    Type: AWS::IAM::GroupPolicy
    Properties:
      GroupName: !Ref iamBedrockGroup
      PolicyName: !Sub
        - "${AWS::StackName}-iamBedrockGroupPolicy-${UID}"
        - UID:
            !Select [
              3,
              !Split ["-", !Select [2, !Split ["/", !Ref AWS::StackId]]],
            ]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - bedrock:InvokeModel
              - bedrock:InvokeModelWithResponseStream
            Resource: "*"
            Condition:
              IpAddress:
                aws:SourceIp: 0.0.0.0/0

  iamBedrockUserToGroup:
    Type: AWS::IAM::UserToGroupAddition
    Properties:
      GroupName: !Ref iamBedrockGroup
      Users:
        - !Ref iamBedrockUser

  bedrockUserAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref iamBedrockUser

  ec2Instance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT90M
    Metadata:
      Comment: Install Update files
      AWS::CloudFormation::Init:
        configSets:
          setup:
            - 00_setup
          dcv_install:
            - 00_dcv_install
          app_install:
            - 05_app_install
        00_setup: # in the following order: packages, groups, users, sources, files, commands, and then services.
          files:
            "/home/ubuntu/update-dcv":
              content: |
                #!/bin/bash
                cd /tmp
                OS_VERSION=$(. /etc/os-release;echo $VERSION_ID | sed -e 's/\.//g')
                sudo rm -f /tmp/nice-dcv-ubuntu$OS_VERSION-$(arch).tgz
                wget https://d1uj6qtbmh3dt5.cloudfront.net/nice-dcv-ubuntu$OS_VERSION-$(arch).tgz
                tar -xvzf nice-dcv-ubuntu$OS_VERSION-$(arch).tgz && cd nice-dcv-*-ubuntu$OS_VERSION-$(arch)
                sudo apt-get install -y ./nice-dcv-server_*.deb
                sudo apt-get install -y ./nice-dcv-web-viewer_*.deb
                sudo apt-get install -y ./nice-xdcv_*.deb
                if (arch | grep -q x86); then
                  sudo apt-get install -y ./nice-dcv-gltest_*.deb
                fi
                if (apt info nice-dcv-gl | grep -iq installed); then
                  sudo apt-get install -y ./nice-dcv-gl_*.deb
                fi
                sudo systemctl daemon-reload
              mode: "000755"
              owner: "ubuntu"
              group: "ubuntu"
            "/etc/systemd/system/dcv-virtual-session.service":
              content: |
                [Unit]
                Description=Create DCV virtual session
                After=default.target network.target

                [Service]
                ExecStart=/opt/dcv-virtual-session.sh

                [Install]
                WantedBy=default.target
              mode: "000644"
              owner: "root"
              group: "root"
            "/opt/dcv-virtual-session.sh":
              content: |
                #!/bin/bash
                dcvUsers=( "ubuntu" )
                while true;
                do
                  for dcvUser in "${dcvUsers[@]}"
                  do
                    if (! /usr/bin/dcv list-sessions | grep -q $dcvUser); then
                      /usr/bin/dcv create-session $dcvUser --owner $dcvUser --storage-root %home% --type virtual
                    fi
                  done
                  date
                  /usr/bin/dcv list-sessions
                  sleep 5
                done
              mode: "000744"
              owner: "root"
              group: "root"
            "/etc/systemd/system/dcv-post-reboot.service":
              content: |
                [Unit]
                Description=Post install tasks
                After=default.target network.target

                [Service]
                ExecStart=/bin/sh -c "/opt/dcv-post-reboot.sh 2>&1 | tee -a /var/log/install-sw.log"

                [Install]
                WantedBy=default.target
              mode: "000644"
              owner: "root"
              group: "root"
            "/opt/dcv-post-reboot.sh":
              content: !Sub |
                #!/bin/bash
                export DEBIAN_FRONTEND=noninteractive

                # Install Ollama: https://github.com/ollama/ollama/blob/main/docs/linux.md
                curl -fsSL https://ollama.com/install.sh | sh
                systemctl daemon-reload
                systemctl enable --now ollama.service
                sleep 1

                # Ollama environment variables: https://github.com/ollama/ollama/blob/main/docs/faq.md#setting-environment-variables-on-linux
                systemctl stop ollama
                sed -i '/^\[Service\]/a Environment="OLLAMA_HOST=0.0.0.0"' /etc/systemd/system/ollama.service
                systemctl daemon-reload
                systemctl start ollama

                # LiteLLM config.yaml: build config with available Bedrock models
                export BEDROCK="${bedrockRegion}"
                export REGION=`echo $BEDROCK | cut -d" " -f1`
                sed -i 's/aws_region_code/'"$REGION"'/g' /opt/docker/compose.yaml

                apt-get install -q -y jq

                aws bedrock list-inference-profiles --region $REGION | jq -r '.inferenceProfileSummaries[] | select (.status=="ACTIVE") | "- model_name: \"\(.inferenceProfileName)\"\n  litellm_params:\n    model: bedrock/\(.inferenceProfileId)\n"' > /tmp/bedrock-models.yaml
                aws bedrock list-foundation-models --region $REGION | jq -r '.modelSummaries[] | select (.modelLifecycle.status == "ACTIVE" and (.responseStreamingSupported == true) and (.inferenceTypesSupported | contains(["ON_DEMAND"])) and (.inputModalities | contains(["TEXT"])) and (.outputModalities | contains(["TEXT"])) ) | "- model_name: \"\(.modelName)\"\n  litellm_params:\n    model: bedrock/\(.modelId)\n"' >> /tmp/bedrock-models.yaml
                sed -i '/model\:/a\   \ aws_region_name: '"$REGION"'' /tmp/bedrock-models.yaml
                sed -i 's/^/  /' /tmp/bedrock-models.yaml
                sed -i '1s/^/model_list:\n/' /tmp/bedrock-models.yaml
                cp -f /tmp/bedrock-models.yaml /opt/docker/bedrock-models.yaml

                chown ubuntu:ubuntu -R /opt/docker
                chmod og-rwx /opt/docker/bedrock-models.yaml

                # Web UI
                export WebUI="${installWebUI}"
                case $WebUI in
                  Yes)
                    # https://github.com/open-webui/open-webui/discussions/4376#discussioncomment-10245922
                    # https://github.com/open-webui/open-webui/discussions/9987#discussioncomment-12313446                 

                    # https://docs.openwebui.com/tutorials/integrations/redis/
                    if (lsb_release -r -s | grep -q 22); then
                      apt-get install -q -y redis-server
                      systemctl enable --now redis-server
                    else
                      apt-get install -q -y valkey-server
                      systemctl enable --now valkey-server
                    fi

                    # Pull Open WebUI and LiteLLM image
                    cd /opt/docker
                    docker compose up -d --quiet-pull
                    # ~ 1 min to change from starting to started
                    sleep 10

                    # Nginx HTTPS proxy                  
                    openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout /etc/ssl/private/ssl-cert-snakeoil.key -out /etc/ssl/certs/ssl-cert-snakeoil.pem -nodes -subj "/C=XX/ST=State/L=City/O=Company/OU=Dept/CN=Host"
                    apt-get install -q -y nginx

                    cp /etc/nginx/nginx.conf  /etc/nginx/nginx.conf."`date +"%Y-%m-%d"`"
                    # disable gzip as per https://bugs.debian.org/773332
                    sed -i "s/gzip on/gzip off/g" /etc/nginx/nginx.conf

                    # disable default site
                    rm -f /etc/nginx/sites-enabled/default
                    
                    # HTTPS proxy with Open WebUI: https://docs.openwebui.com/tutorials/https-nginx/
                    ln -s /etc/nginx/sites-available/reverse-proxy /etc/nginx/sites-enabled/reverse-proxy
                    systemctl enable nginx
                    systemctl restart nginx

                    ;;
                  No)
                    # No Nginx  
                    rm -rf /etc/nginx

                    # Delete Open WebUI entries
                    sed -i "30,55d;65d;69,70d" /opt/docker/compose.yaml
                    sed -i 's/open-webui//g' /opt/docker/compose.yaml

                    # Pull LiteLLM image only
                    cd /opt/docker
                    docker compose up -d --quiet-pull

                    ;;
                esac

                apt-get update
                apt-get upgrade -q -y

                # Add DCV ports
                if (systemctl list-units | grep -q ufw); then
                  if [ "${installDCV}" = "Yes" ]; then
                    ufw allow 8443/tcp
                    ufw allow 8443/udp
                  fi
                  ufw allow http
                  ufw allow https
                fi

                export installDCV="${installDCV}"
                case $installDCV in
                  Yes)
                    systemctl enable dcv-virtual-session && systemctl restart dcv-virtual-session
                    systemctl enable dcvserver && systemctl restart dcvserver
                    ;;
                  No)
                    rm -f /etc/systemd/system/dcv-virtual-session.service
                    rm -f /opt/dcv-virtual-session.sh
                    rm -f /home/ubuntu/update-dcv
                    systemctl daemon-reload
                    ;;
                esac
                               
                /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ec2Instance --region ${AWS::Region}

                rm -f /etc/systemd/system/dcv-post-reboot.service
                rm -f ${!0}
                systemctl daemon-reload
              mode: "000755"
              owner: "root"
              group: "root"
            "/opt/aws/amazon-cloudwatch-agent/bin/config.json":
              content: |
                {
                    "agent": {
                        "metrics_collection_interval": 60,
                        "run_as_user": "cwagent"
                    },
                    "metrics": {
                        "namespace": "CWAgent",
                        "append_dimensions": {
                            "InstanceId": "${aws:InstanceId}"
                        },
                        "metrics_collected": {
                            "mem": {
                                "measurement": [
                                    "used_percent"
                                ]
                            },
                            "disk": {
                                "measurement": [
                                    "used_percent"
                                ],
                                "resources": [
                                    "/"
                                ]
                            }
                        }
                    }
                }
              mode: "000644"
              owner: "root"
              group: "root"
            "/etc/systemd/system/systemd-networkd-wait-online.service.d/override.conf":
              content: |
                [Service]
                ExecStart=
                ExecStart=/usr/lib/systemd/systemd-networkd-wait-online --timeout=3

              mode: "000644"
              owner: "root"
              group: "root"
            "/root/install-sw.sh":
              content: !Sub |
                #!/bin/bash
                mkdir -p /tmp/cfn
                cd /tmp/cfn

                # Update OS
                apt-get update -q
                apt-get upgrade -q -y
                apt-get autoremove -q -y

                # CloudWatch agent: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/install-CloudWatch-Agent-commandline-fleet.html#download-CloudWatch-Agent-on-EC2-Instance-commandline-fleet
                if (arch | grep -q x86); then
                  curl -s -L -O https://amazoncloudwatch-agent.s3.amazonaws.com/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb
                else
                  curl -s -L -O https://amazoncloudwatch-agent.s3.amazonaws.com/ubuntu/arm64/latest/amazon-cloudwatch-agent.deb
                fi
                apt-get install -q -y ./amazon-cloudwatch-agent.deb
                /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/bin/nvidia-config.json -s
                systemctl restart amazon-cloudwatch-agent

                # USB and GPU driver DKMS
                apt-get install -q -y dkms

                # Kernel headers for GPU and USB remotization
                apt-get install -q -y linux-headers-aws
                apt-get install -q -y linux-modules-extra-aws
                apt-get install -q -y usbutils

                # Docker: https://docs.docker.com/engine/install/ubuntu/
                # Add Docker's official GPG key
                apt-get install -q -y ca-certificates curl
                install -m 0755 -d /etc/apt/keyrings
                curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
                chmod a+r /etc/apt/keyrings/docker.asc
                # Add the repository to Apt sources
                echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
                  tee /etc/apt/sources.list.d/docker.list > /dev/null
                apt-get update -q
                apt-get install -q -y docker-ce
                systemctl enable docker
                usermod -aG docker ubuntu

                # AWS CLI: https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html
                sudo snap install aws-cli --classic
                if [ -e /snap/bin/aws ]; then
                  rm -f /home/ubuntu/update-awscli
                else
                  /home/ubuntu/update-awscli
                fi
                echo "export AWS_CLI_AUTO_PROMPT=on-partial" >> /home/ubuntu/.bashrc

                # Certbot: https://eff-certbot.readthedocs.io/en/stable/install.html#snap-recommended
                sudo snap install certbot --classic
                if [ -e /snap/bin/certbot ]; then
                  ln -s /snap/bin/certbot /usr/bin/certbot
                  sudo snap set certbot trust-plugin-with-root=ok
                  sudo snap install certbot-dns-route53
                else
                  apt-get install -q -y python3-certbot python3-certbot-apache python3-certbot-nginx python3-certbot-dns-route53
                fi    

                rm -f ${!0}
              mode: "000740"
              owner: "root"
              group: "root"
          commands:
            install:
              command: "/root/install-sw.sh >> /var/log/install-sw.log 2>&1"
              ignoreErrors: "true"
        00_dcv_install:
          files:
            "/root/install-dcv.sh":
              content: !Sub |
                #!/bin/bash
                mkdir -p /tmp/cfn
                cd /tmp/cfn

                # Update OS
                apt-get update -q
                apt-get upgrade -q -y

                # DCV prereq: https://docs.aws.amazon.com/dcv/latest/adminguide/setting-up-installing-linux-prereq.html
                apt-get install -q -y ubuntu-desktop-minimal
                apt-get install -q -y gdm3
                apt-get install -q -y amazon-ec2-utils

                # Disable the Wayland protocol: https://docs.aws.amazon.com/dcv/latest/adminguide/setting-up-installing-linux-prereq.html#linux-prereq-wayland
                sed -i '/^\[daemon\]/a WaylandEnable=false' /etc/gdm3/custom.conf

                # resolve "/var/lib/dpkg/info/nice-dcv-server.postinst: 8: dpkg-architecture: not found" when installing dcv-server
                apt-get install -q -y dpkg-dev

                # Microphone redirection: https://docs.aws.amazon.com/dcv/latest/adminguide/setting-up-installing-linux-server.html
                apt-get install -q -y pulseaudio-utils
                apt-get install -q -y gnome-tweaks gnome-shell-extension-ubuntu-dock
                apt-get install -q -y gnome-shell-extension-manager

                # DCV: https://docs.aws.amazon.com/dcv/latest/adminguide/setting-up-installing-linux-server.html
                curl -s -L -O https://d1uj6qtbmh3dt5.cloudfront.net/NICE-GPG-KEY
                gpg --import NICE-GPG-KEY
                OS_VERSION=$(. /etc/os-release;echo $VERSION_ID | sed -e 's/\.//g')
                curl -s -L -O https://d1uj6qtbmh3dt5.cloudfront.net/nice-dcv-ubuntu$OS_VERSION-$(arch).tgz
                tar -xvzf nice-dcv-ubuntu*.tgz && cd nice-dcv-*-$(arch)
                apt-get install -q -y ./nice-dcv-server_*.deb
                apt-get install -q -y ./nice-dcv-web-viewer_*.deb
                usermod -aG video dcv
                apt-get install -q -y ./nice-xdcv_*.deb
                if (arch | grep -q x86); then
                  apt-get install -q -y ./nice-dcv-gltest_*.deb
                fi

                # Printer redirection: https://docs.aws.amazon.com/dcv/latest/adminguide/manage-printer.html
                apt-get install -q -y cups
                GROUP=$(cat /etc/cups/cups-files.conf | grep -oP "SystemGroup\s\K\w+")
                usermod -a -G $GROUP dcv
                systemctl enable cups

                # glxinfo : https://docs.aws.amazon.com/dcv/latest/adminguide/setting-up-installing-linux-prereq.html#linux-prereq-tools
                apt-get install -q -y mesa-utils
                apt-get install -q -y vulkan-tools clinfo

                # QUIC: https://docs.aws.amazon.com/dcv/latest/adminguide/enable-quic.html
                cp /etc/dcv/dcv.conf /etc/dcv/dcv.conf."`date +"%Y-%m-%d"`"
                sed -i "s/^#enable-quic-frontend=true/enable-quic-frontend=true/g" /etc/dcv/dcv.conf

                # X11 dummy driver for non GPU instance console session
                apt-get install -q -y xserver-xorg-video-dummy

                # Higher web client max resolution: https://docs.aws.amazon.com/dcv/latest/adminguide/config-param-ref.html
                sed -i "/^\[display/a web-client-max-head-resolution=(4096, 2160)" /etc/dcv/dcv.conf
                # Console session support
                sed -i "/^\[session-management\/automatic-console-session/a owner=\"ubuntu\"\nstorage-root=\"%home%\"" /etc/dcv/dcv.conf

                # Disable reporting : https://wiki.ubuntu.com/Apport
                sed -i "s/enabled=1/enable=0/g" /etc/default/apport
                apt-get remove -q -y ubuntu-report whoopsie apport
                apt-get autoremove -q -y

                # Disable upgrade prompt: https://help.ubuntu.com/community/Upgrades#Upgrade_policy
                sed -i "s/Prompt=lts/Prompt=never/g" /etc/update-manager/release-upgrades
                chown -R ubuntu:ubuntu /home/ubuntu/.config

                # VS Code: https://code.visualstudio.com/docs/setup/linux#_install-vs-code-on-linux
                apt-get install -q -y wget gpg
                wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg
                install -D -o root -g root -m 644 packages.microsoft.gpg /etc/apt/keyrings/packages.microsoft.gpg
                echo "deb [arch=amd64,arm64,armhf signed-by=/etc/apt/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" | tee /etc/apt/sources.list.d/vscode.list > /dev/null
                rm -f packages.microsoft.gpg

                # Extensions: https://code.visualstudio.com/docs/datascience/overview
                apt-get update -q
                apt-get install -q -y code
                sudo -u ubuntu code --install-extension amazonwebservices.aws-toolkit-vscode
                sudo -u ubuntu code --install-extension amazonwebservices.amazon-q-vscode
                sudo -u ubuntu code --install-extension ms-azuretools.vscode-docker

                # Chrome and Edge browser
                if (arch | grep -q x86); then
                  # Google Chrome: https://www.google.com/linuxrepositories/
                  curl -fSsL https://dl.google.com/linux/linux_signing_key.pub | gpg --dearmor | sudo tee /usr/share/keyrings/google-chrome.gpg > /dev/null
                  echo deb [arch=amd64 signed-by=/usr/share/keyrings/google-chrome.gpg] http://dl.google.com/linux/chrome/deb/ stable main | sudo tee /etc/apt/sources.list.d/google-chrome.list
                  apt-get update -q
                  apt-get install -q -y google-chrome-stable

                  # Microsoft Edge: https://learn.microsoft.com/en-us/linux/packages
                  curl -fSsL https://packages.microsoft.com/keys/microsoft.asc | sudo gpg --dearmor | sudo tee /usr/share/keyrings/microsoft-edge.gpg > /dev/null
                  echo 'deb [arch=amd64 signed-by=/usr/share/keyrings/microsoft-edge.gpg] https://packages.microsoft.com/repos/edge stable main' | sudo tee /etc/apt/sources.list.d/microsoft-edge.list
                  apt-get update -q
                  apt-get install -q -y microsoft-edge-stable
                fi

                rm -f ${!0}
              mode: "000740"
              owner: "root"
              group: "root"
            "/home/ubuntu/.gnomerc":
              content: |
                export XDG_CURRENT_DESKTOP=ubuntu:GNOME
                export GNOME_SHELL_SESSION_MODE=ubuntu
                export XDG_DATA_DIRS=/usr/share/gnome:/usr/local/share:/usr/share:/var/lib/snapd/desktop
              mode: "000644"
              owner: "ubuntu"
              group: "ubuntu"
            "/etc/skel/.gnomerc":
              content: |
                export XDG_CURRENT_DESKTOP=ubuntu:GNOME
                export GNOME_SHELL_SESSION_MODE=ubuntu
                export XDG_DATA_DIRS=/usr/share/gnome:/usr/local/share:/usr/share:/var/lib/snapd/desktop
              mode: "000644"
              owner: "root"
              group: "root"
            "/home/ubuntu/.config/gnome-initial-setup-done":
              content: |
                yes
              mode: "000664"
              owner: "ubuntu"
              group: "ubuntu"
            "/etc/skel/.config/gnome-initial-setup-done":
              content: |
                yes
              mode: "000644"
              owner: "root"
              group: "root"
          commands:
            install:
              command: "/root/install-dcv.sh > /var/log/install-dcv.log 2>&1"
              ignoreErrors: "true"
        05_app_install:
          files:
            "/etc/nginx/sites-available/reverse-proxy":
              content: |
                # https://docs.openwebui.com/tutorials/https-nginx/
                server {                      
                        # HTTP
                        listen 80 default_server;
                        listen [::]:80 default_server;

                        # HTTPS
                        listen 443 ssl default_server;
                        listen [::]:443 ssl default_server;
                        include snippets/snakeoil.conf;

                        location / {
                            proxy_pass http://localhost:8080;

                            # Add WebSocket support (Necessary for version 0.5.0 and up)
                            proxy_http_version 1.1;
                            proxy_set_header Upgrade $http_upgrade;
                            proxy_set_header Connection "upgrade";

                            proxy_set_header Host $host;
                            proxy_set_header X-Real-IP $remote_addr;
                            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                            proxy_set_header X-Forwarded-Proto $scheme;

                            # (Optional) Disable proxy buffering for better streaming response from models
                            proxy_buffering off;
                        }
                }
              mode: "000644"
              owner: "root"
              group: "root"
            "/opt/docker/compose.yaml": # https://docs.openwebui.com/getting-started/env-configuration
              content: !Sub |
                services:
                  litellm:
                    container_name: litellm
                    image: ghcr.io/berriai/litellm:main-latest
                    entrypoint: "litellm"
                    command: ["--port", "4000", "--config", "/app/config.yaml" ]
                    volumes:
                      - /opt/docker/bedrock-models.yaml:/app/config.yaml:ro
                    network_mode: "host"
                    restart: always
                    environment:
                      AWS_REGION_NAME: aws_region_code
                      AWS_ACCESS_KEY_ID: ${bedrockUserAccessKey}
                      AWS_SECRET_ACCESS_KEY: ${bedrockUserAccessKey.SecretAccessKey}

                  litellm-image:
                    container_name: litellm-image
                    image: ghcr.io/berriai/litellm:main-latest
                    entrypoint: "litellm"
                    command: ["--port", "4100", "--config", "/app/config.yaml" ]
                    volumes:
                      - /opt/docker/bedrock-image-models.yaml:/app/config.yaml:ro
                    network_mode: "host"
                    restart: always
                    environment:
                      AWS_REGION_NAME: us-west-2
                      AWS_ACCESS_KEY_ID: ${bedrockUserAccessKey}
                      AWS_SECRET_ACCESS_KEY: ${bedrockUserAccessKey.SecretAccessKey}

                  open-webui:
                    container_name: open-webui
                    image: ghcr.io/open-webui/open-webui
                    network_mode: "host"
                    restart: always
                    volumes:
                      - open-webui:/app/backend/data
                    healthcheck:
                      test: ["CMD", "curl", "-f", "http://127.0.0.1:8080/health"]
                      interval: 10s
                      timeout: 5s
                      retries: 18
                      start_period: 5s
                    environment:                      
                      - ENABLE_WEBSOCKET_SUPPORT=false
                      - OLLAMA_BASE_URL=http://127.0.0.1:11434
                      - PORT=8080
                      - ENABLE_EVALUATION_ARENA_MODELS=false
                      - ENABLE_OPENAI_API=true
                      - OPENAI_API_BASE_URL=http://127.0.0.1:4000
                      - OPENAI_API_KEY=anything
                      - ENABLE_IMAGE_GENERATION=True
                      - IMAGE_GENERATION_ENGINE=openai
                      - IMAGE_GENERATION_MODEL=Stable Diffusion 3.5 Large
                      - IMAGES_OPENAI_API_BASE_URL=http://127.0.0.1:4100
                      - IMAGES_OPENAI_API_KEY=anything

                  # https://github.com/beatkind/watchtower: containrrr/watchtower not being maintained
                  watchtower:
                    container_name: watchtower
                    image: beatkind/watchtower
                    volumes:
                      - /var/run/docker.sock:/var/run/docker.sock
                    command: --interval 86400 open-webui litellm # Check for updates daily
                    depends_on:
                      - open-webui
                      - litellm
                    restart: always

                volumes:
                  open-webui: {}
              mode: "000640"
              owner: "ubuntu"
              group: "ubuntu"
            "/opt/docker/bedrock-image-models.yaml":
              content: |
                litellm_settings:
                  drop_params: True

                model_list:              
                  - model_name: "Stable Diffusion 3.5 Large"
                    litellm_params:
                      model: bedrock/stability.sd3-5-large-v1:0
                      aws_region_name: us-west-2              

                  - model_name: "Stable Image Ultra 1.0"
                    litellm_params:
                      model: bedrock/stability.stable-image-ultra-v1:1
                      aws_region_name: us-west-2

                  - model_name: "Nova Canvas"
                    litellm_params:
                      model: bedrock/amazon.nova-canvas-v1:0
                      aws_region_name: us-east-1

              mode: "000640"
              owner: "ubuntu"
              group: "ubuntu"
            "/home/ubuntu/update-ollama.sh":
              content: |
                #!/bin/bash
                curl -fsSL https://ollama.com/install.sh | sh
              mode: "000755"
              owner: "ubuntu"
              group: "ubuntu"
    Properties:
      ImageId:
        !If [
          useUbuntu2404x86,
          "{{resolve:ssm:/aws/service/canonical/ubuntu/server/24.04/stable/current/amd64/hvm/ebs-gp3/ami-id}}",
          !If [
            useUbuntu2404arm64,
            "{{resolve:ssm:/aws/service/canonical/ubuntu/server/24.04/stable/current/arm64/hvm/ebs-gp3/ami-id}}",
            !If [
              useUbuntu2204x86,
              "{{resolve:ssm:/aws/service/canonical/ubuntu/server/22.04/stable/current/amd64/hvm/ebs-gp2/ami-id}}",
              !If [
                useUbuntu2204arm64,
                "{{resolve:ssm:/aws/service/canonical/ubuntu/server/22.04/stable/current/arm64/hvm/ebs-gp2/ami-id}}",
                !If [
                  useUbuntuPro2404x86,
                  "{{resolve:ssm:/aws/service/canonical/ubuntu/pro-server/24.04/stable/current/amd64/hvm/ebs-gp3/ami-id}}",
                  !If [
                    useUbuntuPro2404arm64,
                    "{{resolve:ssm:/aws/service/canonical/ubuntu/pro-server/24.04/stable/current/arm64/hvm/ebs-gp3/ami-id}}",
                    !If [
                      useUbuntuPro2204x86,
                      "{{resolve:ssm:/aws/service/canonical/ubuntu/pro-server/22.04/stable/current/amd64/hvm/ebs-gp2/ami-id}}",
                      "{{resolve:ssm:/aws/service/canonical/ubuntu/pro-server/22.04/stable/current/arm64/hvm/ebs-gp2/ami-id}}",
                    ],
                  ],
                ],
              ],
            ],
          ],
        ]
      InstanceType: !Select [0, !Split [" ", !Ref instanceType]]
      IamInstanceProfile: !Ref instanceProfile
      KeyName: !Ref ec2KeyPair
      SubnetId: !Ref subnetID
      Monitoring: true
      DisableApiTermination: !If [enableProtection, true, false]
      EbsOptimized: true
      SecurityGroupIds:
        - !Ref securityGroup
        - !If [
            createSgCloudFront,
            !Ref securityGroupForCloudFrontHTTP,
            !Ref AWS::NoValue,
          ]
        - !If [
            createSgCloudFront,
            !Ref securityGroupForCloudFrontHTTPS,
            !Ref AWS::NoValue,
          ]
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: !Ref volumeType
            VolumeSize: !Ref volumeSize
            DeleteOnTermination: true
            Encrypted: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          mkdir -p /tmp/cfn
          cd /tmp/cfn

          export DEBIAN_FRONTEND=noninteractive

          systemctl stop apt-daily.timer apt-daily-upgrade.timer
          apt-get update -q
          sleep 10
          pkill apt
          pkill dpkg

          # CfN scripts: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-helper-scripts-reference.html
          apt-get install -q -y python3 python3-pip python3-setuptools python3-docutils python3-daemon >> /var/log/install-sw.log 2>&1
          curl -s -L -O https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
          tar -xf aws-cfn-bootstrap-py3-latest.tar.gz
          cd aws-cfn-bootstrap-2.0
          python3 setup.py build > /var/log/install-cfn-helper.log 2>&1
          python3 setup.py install >> /var/log/install-cfn-helper.log 2>&1
          sed -i "1,1s/python$/python3/g" /usr/local/bin/cfn-*
          cd /tmp/cfn
          export CFN_INIT="python3 /usr/local/bin/cfn-init"

          $CFN_INIT -v --stack ${AWS::StackName} --resource ec2Instance --region ${AWS::Region} -c setup

          # Install desktop environment and DCV?
          if [ "${installDCV}" = "Yes" ]; then
            $CFN_INIT -v --stack ${AWS::StackName} --resource ec2Instance --region ${AWS::Region} -c dcv_install
          fi

          # Ollama
          $CFN_INIT -v --stack ${AWS::StackName} --resource ec2Instance --region ${AWS::Region} -c app_install

          #
          systemctl set-default multi-user.target
          systemctl daemon-reload

          # No GPU driver
          systemctl enable dcv-post-reboot

          sleep 1 && reboot
      Tags:
        - Key: Name
          Value: !Ref ec2Name
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: GitHub
          Value: https://github.com/aws-samples/ollama-server

  elasticIP:
    Condition: useElasticIP
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      NetworkBorderGroup: !Ref AWS::Region
      InstanceId: !Ref ec2Instance
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: Name
          Value: !Sub
            - "${AWS::StackName}-elasticIP-${UID}"
            - UID:
                !Select [
                  3,
                  !Split ["-", !Select [2, !Split ["/", !Ref AWS::StackId]]],
                ]
        - Key: GitHub
          Value: https://github.com/aws-samples/ollama-server

  albHttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: createHttpListener
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W56
            reason: "HTTPS is implemented by albHttpsListener"
    #checkov:skip=CKV_AWS_2:HTTPS is implemented by albHttpsListener
    #checkov:skip=CKV_AWS_103:TLS is implemented by albHttpsListener
    Properties:
      LoadBalancerArn: !Ref alb
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref albTargetGroup
      Port: 80
      Protocol: HTTP

  albHttpRedirectListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: createHttpRedirectListener
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W56
            reason: "Redirect HTTP to HTTPS"
    #checkov:skip=CKV_AWS_2:Redirect HTTP to HTTPS
    Properties:
      LoadBalancerArn: !Ref alb
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: "redirect"
          RedirectConfig:
            Protocol: "HTTPS"
            Port: 443
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"

  albHttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: createHttpsListener
    Properties:
      LoadBalancerArn: !Ref alb
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref albCertificateArn
      SslPolicy: !Ref albSecurityPolicy
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref albTargetGroup
      ListenerAttributes:
        - !If
          - sendHSTS
          - Key: routing.http.response.server.enabled
            Value: true
          - !Ref AWS::NoValue
        - !If
          - sendHSTS
          - Key: routing.http.response.strict_transport_security.header_value
            Value: !Ref albHstsHeaderValue
          - !Ref AWS::NoValue

  albTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: createALB
    Properties:
      HealthCheckEnabled: true
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: "200-302"
      IpAddressType: ipv4
      Port: 443
      Protocol: HTTPS
      ProtocolVersion: HTTP1
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: GitHub
          Value: https://github.com/aws-samples/ollama-server
      TargetType: instance
      Targets:
        - Id: !Ref ec2Instance
          Port: 443
      VpcId: !Ref vpcID

  albSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: createALB
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W5
            reason: "Egress is to target group"
          - id: W9
            reason: "Not /32 CIDR ingress is required for ALB"
          - id: W2
            reason: "Open to world ingress is required for ALB"
          - id: W29
            reason: "Egress is to target group"
    #checkov:skip=CKV_AWS_23:All rules have description
    Properties:
      GroupDescription: ALB allow HTTP and HTTPS
      VpcId: !Ref vpcID
      SecurityGroupIngress:
        - !If
          - albAllowIPv4
          - Description: HTTP (IPv4)
            IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          - !Ref AWS::NoValue
        - !If
          - albAllowIPv4
          - Description: HTTPS (IPv4)
            IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: 0.0.0.0/0
          - !Ref AWS::NoValue
        - !If
          - albAllowIPv6
          - Description: HTTP (IPv6)
            IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIpv6: ::/0
          - !Ref AWS::NoValue
        - !If
          - albAllowIPv6
          - Description: HTTPS (IPv6)
            IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIpv6: ::/0
          - !Ref AWS::NoValue
      SecurityGroupEgress:
        - !If
          - albAllowIPv4
          - Description: Allow all outbound traffic (IPv4)
            IpProtocol: tcp
            FromPort: 0
            ToPort: 65535
            CidrIp: 0.0.0.0/0
          - !Ref AWS::NoValue
        - !If
          - albAllowIPv6
          - Description: Allow all outbound traffic (IPv6)
            IpProtocol: tcp
            FromPort: 0
            ToPort: 65535
            CidrIpv6: ::/0
          - !Ref AWS::NoValue
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: Name
          Value: !Sub
            - "${AWS::StackName}-albSecurityGroup-${UID}"
            - UID:
                !Select [
                  3,
                  !Split ["-", !Select [2, !Split ["/", !Ref AWS::StackId]]],
                ]
        - Key: GitHub
          Value: https://github.com/aws-samples/ollama-server

  albLoggingBucket:
    Type: AWS::S3::Bucket
    Condition: enableAlbLogging
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: "Bucket contains ALB logs. Access logging is not required."
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: GitHub
          Value: https://github.com/aws-samples/ollama-server

  albLoggingBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: enableAlbLogging
    Properties:
      Bucket: !Ref albLoggingBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - !If
            - isPre2022Region
            - Sid: AllowALBLogDelivery
              Effect: Allow
              Principal:
                AWS: !Sub
                  - "arn:${AWS::Partition}:iam::${albAccountID}:root"
                  - albAccountID:
                      !FindInMap [albLoggingAccountID, !Ref AWS::Region, Value]
              Action: "s3:PutObject"
              Resource: !Sub "${albLoggingBucket.Arn}/*"
            - Sid: AllowALBLogDelivery
              Effect: Allow
              Principal:
                Service: logdelivery.elasticloadbalancing.amazonaws.com
              Action: "s3:PutObject"
              Resource: !Sub "${albLoggingBucket.Arn}/*"

  alb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Condition: createALB
    Properties:
      IpAddressType: !FindInMap [albIpTypeMapping, !Ref albIpAddressType, Value]
      Scheme: !Ref albScheme
      SecurityGroups:
        - !Ref albSecurityGroup
        - !If [
            createSgCloudFront,
            !Ref securityGroupForCloudFrontHTTP,
            !Ref AWS::NoValue,
          ]
        - !If [
            createSgCloudFront,
            !Ref securityGroupForCloudFrontHTTPS,
            !Ref AWS::NoValue,
          ]
      Subnets: !Ref albSubnets
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: !If [enableAlbLogging, "true", "false"]
        - !If
          - enableAlbLogging
          - Key: access_logs.s3.bucket
            Value: !Ref albLoggingBucket
          - !Ref AWS::NoValue
        - !If
          - enableAlbLogging
          - Key: access_logs.s3.prefix
            Value: "ALB-Logs"
          - !Ref AWS::NoValue
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: GitHub
          Value: https://github.com/aws-samples/ollama-server

  backupPlan:
    Type: AWS::Backup::BackupPlan
    Condition: createBackup
    Properties:
      BackupPlan:
        BackupPlanName: !Sub
          - "${AWS::StackName}-backupPlan-${UID}"
          - UID:
              !Select [
                3,
                !Split ["-", !Select [2, !Split ["/", !Ref AWS::StackId]]],
              ]
        BackupPlanRule:
          - RuleName: !Sub
              - "${AWS::StackName}-backupRule-${UID}"
              - UID:
                  !Select [
                    3,
                    !Split ["-", !Select [2, !Split ["/", !Ref AWS::StackId]]],
                  ]
            TargetBackupVault: !Ref backupVault
            ScheduleExpression: !Ref scheduleExpression
            ScheduleExpressionTimezone: !Ref scheduleExpressionTimezone
            Lifecycle:
              DeleteAfterDays: !Ref deleteAfterDays
      BackupPlanTags:
        {
          "StackName": !Ref AWS::StackName,
          "StackId": !Ref AWS::StackId,
          "GitHub": "https://github.com/aws-samples/ollama-server",
        }

  backupVault:
    Type: AWS::Backup::BackupVault
    Condition: createBackup
    UpdateReplacePolicy: Delete
    Properties:
      BackupVaultName: !Sub
        - "${AWS::StackName}-backupVault-${UID}"
        - UID:
            !Select [
              3,
              !Split ["-", !Select [2, !Split ["/", !Ref AWS::StackId]]],
            ]
      BackupVaultTags:
        {
          "StackName": !Ref AWS::StackName,
          "StackId": !Ref AWS::StackId,
          "GitHub": "https://github.com/aws-samples/ollama-server",
        }

  backupSelection:
    Type: AWS::Backup::BackupSelection
    Condition: createBackup
    Properties:
      BackupPlanId: !Ref backupPlan
      BackupSelection:
        IamRoleArn: !GetAtt backupRestoreRole.Arn
        Resources:
          - !Sub arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:instance/${ec2Instance}
        SelectionName: !Sub
          - "${AWS::StackName}-backupSelection-${UID}"
          - UID:
              !Select [
                3,
                !Split ["-", !Select [2, !Split ["/", !Ref AWS::StackId]]],
              ]

  backupRestoreRole:
    Type: AWS::IAM::Role
    Condition: createBackup
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: backup.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: restore-EC2-instance-profile
          PolicyDocument: # https://docs.aws.amazon.com/aws-backup/latest/devguide/restoring-ec2.html
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !GetAtt instanceIamRole.Arn
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForBackup
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForRestores
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: GitHub
          Value: https://github.com/aws-samples/ollama-server

  cfVpcOrigin:
    Type: AWS::CloudFront::VpcOrigin
    Condition: cfVPCOrigin
    Properties:
      VpcOriginEndpointConfig:
        Arn: !If
          - createALB
          - !Sub arn:${AWS::Partition}:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:loadbalancer/${alb.LoadBalancerFullName}
          - !Sub arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:instance/${ec2Instance}
        Name: !If
          - createALB
          - !Sub ${AWS::StackName}-${alb.LoadBalancerName}
          - !Sub ${AWS::StackName}-${ec2Instance}
        OriginProtocolPolicy:
          !If [createHttpRedirectListener, https-only, http-only]
        OriginSSLProtocols:
          - TLSv1.2
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: GitHub
          Value: https://github.com/aws-samples/ollama-serverx

  cfDistribution:
    Type: AWS::CloudFront::Distribution
    Condition: noCloudFrontLogging
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W10
            reason: "Optional resource. Use cfDistributionWithLogging for access logging option"
          - id: W70
            reason: "TLS 1.2 is enforced"
    Properties:
      DistributionConfig:
        Origins:
          - !If
            - cfVPCOrigin
            - DomainName:
                !If [
                  createALB,
                  !GetAtt alb.DNSName,
                  !GetAtt ec2Instance.PrivateDnsName,
                ]
              Id: !Ref ec2Instance
              VpcOriginConfig:
                VpcOriginId: !GetAtt cfVpcOrigin.Id
            - DomainName:
                !If [
                  createALB,
                  !GetAtt alb.DNSName,
                  !GetAtt ec2Instance.PublicDnsName,
                ]
              Id: !Ref ec2Instance
              CustomOriginConfig:
                OriginProtocolPolicy:
                  !If [createHttpRedirectListener, https-only, http-only]
                OriginSSLProtocols:
                  - TLSv1.2
        Enabled: true
        Comment: !Ref AWS::StackName
        HttpVersion: http2and3
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
          MinimumProtocolVersion: TLSv1.2_2021
        DefaultCacheBehavior:
          AllowedMethods: !Split [",", "GET,HEAD,OPTIONS,PUT,PATCH,POST,DELETE"]
          CachedMethods:
            - "HEAD"
            - "GET"
          Compress: true
          CachePolicyId: "4cc15a8a-d715-48a4-82b8-cc0b614638fe"
          OriginRequestPolicyId: "216adef6-5c7f-47e4-b989-5492eafa07d3"
          ResponseHeadersPolicyId: "67f7725c-6f97-4210-82d7-5512b31e9d03"
          TargetOriginId: !Ref ec2Instance
          ViewerProtocolPolicy: "redirect-to-https"
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: GitHub
          Value: https://github.com/aws-samples/ollama-server

  cfDistributionWithLogging:
    Type: AWS::CloudFront::Distribution
    Condition: enableCloudFrontLogging
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W70
            reason: "TLS 1.2 is enforced"
    Properties:
      DistributionConfig:
        Origins:
          - !If
            - cfVPCOrigin
            - DomainName:
                !If [
                  createALB,
                  !GetAtt alb.DNSName,
                  !GetAtt ec2Instance.PrivateDnsName,
                ]
              Id: !Ref ec2Instance
              VpcOriginConfig:
                VpcOriginId: !GetAtt cfVpcOrigin.Id
            - DomainName:
                !If [
                  createALB,
                  !GetAtt alb.DNSName,
                  !GetAtt ec2Instance.PublicDnsName,
                ]
              Id: !Ref ec2Instance
              CustomOriginConfig:
                OriginProtocolPolicy:
                  !If [createHttpRedirectListener, https-only, http-only]
                OriginSSLProtocols:
                  - TLSv1.2
        Enabled: true
        Comment: !Ref AWS::StackName
        HttpVersion: http2and3
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
          MinimumProtocolVersion: TLSv1.2_2021
        DefaultCacheBehavior:
          AllowedMethods: !Split [",", "GET,HEAD,OPTIONS,PUT,PATCH,POST,DELETE"]
          CachedMethods:
            - "HEAD"
            - "GET"
          Compress: true
          CachePolicyId: "4cc15a8a-d715-48a4-82b8-cc0b614638fe"
          OriginRequestPolicyId: "216adef6-5c7f-47e4-b989-5492eafa07d3"
          ResponseHeadersPolicyId: "67f7725c-6f97-4210-82d7-5512b31e9d03"
          TargetOriginId: !Ref ec2Instance
          ViewerProtocolPolicy: "redirect-to-https"
        Logging:
          Bucket: !GetAtt cfLoggingBucket.DomainName
          IncludeCookies: false
          Prefix: "CloudFront-Logs/"
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: GitHub
          Value: https://github.com/aws-samples/ollama-server

  cfS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: enableCloudFrontLogging
    Properties:
      Bucket: !Ref cfLoggingBucket
      PolicyDocument:
        Statement:
          - Sid: AllowCloudFrontServicePrincipal
            Effect: Allow
            Principal:
              Service: "cloudfront.amazonaws.com"
            Action: "s3:PutObject"
            Resource: !Sub "arn:aws:s3:::${cfLoggingBucket}/*"
            Condition:
              StringEquals:
                "AWS:SourceArn": !Sub "arn:${AWS::Partition}:cloudfront::${AWS::AccountId}:distribution/${cfDistributionWithLogging}"

  cfLoggingBucket:
    Type: AWS::S3::Bucket
    Condition: enableCloudFrontLogging
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: "Bucket contains CloudFront logs. Access logging is not required."
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: GitHub
          Value: https://github.com/aws-samples/ollama-server

Outputs:
  EC2console:
    Description: EC2 console
    Value: !Sub
      - "https://${AWS::Region}.${url}/ec2/home?region=${AWS::Region}#Instances:search=${ec2Instance}"
      - url:
          !FindInMap [
            ConsoleUrl,
            !Ref AWS::Partition,
            url,
            DefaultValue: "console.aws.amazon.com",
          ]

  EC2instanceConnect:
    Condition: createSgEIC
    Description: EC2 Instance Connect
    Value: !Sub
      - "https://${AWS::Region}.${url}/ec2-instance-connect/ssh?connType=standard&instanceId=${ec2Instance}&osUser=ubuntu&sshPort=22#/"
      - url:
          !FindInMap [
            ConsoleUrl,
            !Ref AWS::Partition,
            url,
            DefaultValue: "console.aws.amazon.com",
          ]

  EC2serialConsole:
    Condition: createSgEIC
    Description: EC2 Serial Console
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/ec2-instance-connect/ssh?connType=serial&instanceId=${ec2Instance}&serialPort=0#/"

  SSMsessionManager:
    Description: SSM Session Manager ("sudo passwd ubuntu" to change password)
    Value: !Sub
      - "https://${AWS::Region}.${url}/systems-manager/session-manager/${ec2Instance}"
      - url:
          !FindInMap [
            ConsoleUrl,
            !Ref AWS::Partition,
            url,
            DefaultValue: "console.aws.amazon.com",
          ]

  DCVwebConsole:
    Condition: installDCV
    Description: DCV web browser client (login as ubuntu)
    Value: !Sub
      - "https://${IpAddress}:8443"
      - IpAddress:
          !If [
            displayPublicIP,
            !GetAtt ec2Instance.PublicIp,
            !GetAtt ec2Instance.PrivateIp,
          ]

  WebUrl:
    Condition: installWebUI
    Description: EC2 Open WebUI URL
    Value:
      !If [
        displayPublicIP,
        !Sub "https://${ec2Instance.PublicIp}",
        !Sub "https://${ec2Instance.PrivateIp}",
      ]

  CloudFrontURL:
    Condition: createCloudFront
    Description: CloudFront distribution URL
    Value:
      !If [
        enableCloudFrontLogging,
        !GetAtt cfDistributionWithLogging.DomainName,
        !GetAtt cfDistribution.DomainName,
      ]

  CloudFrontConsole:
    Condition: createCloudFront
    Description: CloudFront console
    Value: !Sub
      - "https://${url}/cloudfront/home#/distributions/${cf}"
      - {
          cf:
            !If [
              enableCloudFrontLogging,
              !GetAtt cfDistributionWithLogging.Id,
              !GetAtt cfDistribution.Id,
            ],
          url:
            !FindInMap [
              ConsoleUrl,
              !Ref AWS::Partition,
              url,
              DefaultValue: "console.aws.amazon.com",
            ],
        }

  AlbConsole:
    Condition: createALB
    Description: ALB Console
    Value: !Sub
      - "https://${AWS::Region}.${url}/ec2/home?region=${AWS::Region}#LoadBalancers:search=${alb}"
      - url:
          !FindInMap [
            ConsoleUrl,
            !Ref AWS::Partition,
            url,
            DefaultValue: "console.aws.amazon.com",
          ]

  AlbDnsName:
    Condition: createALB
    Description: ALB URL
    Value: !GetAtt alb.DNSName
